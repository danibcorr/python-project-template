{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#python-project-template","title":"\ud83d\udc0d Python Project Template","text":"<p>Welcome to the Python Project Template \u2014 your go-to starter kit for building robust Python projects with clean code, strong testing, built-in security, and automated deployment. Whether you're launching a new idea or refining your workflow, this template sets you up for success.</p>"},{"location":"index.html#whats-inside","title":"What's Inside","text":"<ul> <li>Linting &amp; Type Checking: Keep your code clean with   Ruff and Mypy.</li> <li>Security Scanning: Catch vulnerabilities early using   Bandit.</li> <li>Code Complexity Analysis: Understand your codebase with   Complexipy.</li> <li>Testing Suite: Reliable testing with Pytest.</li> <li>Auto Documentation: Generate and deploy docs with   MkDocs + GitHub Pages.</li> <li>CI/CD: Automate your workflow using GitHub Actions \u2014 from linting and testing to   doc deployment.</li> </ul> <p>And more...</p>"},{"location":"index.html#getting-started","title":"Getting Started","text":""},{"location":"index.html#1-generate-your-project","title":"1. Generate Your Project","text":"<p>Activate your Python environment, install <code>cookiecutter</code>, and run:</p> <pre><code>cookiecutter https://github.com/danibcorr/python-project-template.git\n</code></pre>"},{"location":"index.html#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Use the included <code>Makefile</code>:</p> <pre><code>make install\n</code></pre>"},{"location":"index.html#3-run-the-pipeline","title":"3. Run the Pipeline","text":"<p>Lint, test, and check your project:</p> <pre><code>make pipeline\n</code></pre> <p>Or run the full suite including docs:</p> <pre><code>make all\n</code></pre>"},{"location":"content/content.html","title":"Python Project Template Documentation","text":""},{"location":"content/content.html#overview","title":"Overview","text":"<p>The Python Project Template offers a standardized, maintainable foundation for Python projects, with integrated tooling for:</p> <ul> <li>Code quality enforcement</li> <li>Static analysis and security auditing</li> <li>Automated testing</li> <li>Documentation generation</li> <li>Development automation via Make and GitHub Actions</li> </ul> <p>This template is intended to streamline development processes, promote consistency across projects, and encourage best practices.</p>"},{"location":"content/content.html#project-structure-and-core-components","title":"Project Structure and Core Components","text":""},{"location":"content/content.html#makefile","title":"<code>Makefile</code>","text":"<p>The <code>Makefile</code> defines reusable commands to facilitate routine operations such as installation, cleaning, linting, testing, and documentation. These tasks can be executed using <code>make &lt;target&gt;</code>.</p>"},{"location":"content/content.html#make-install","title":"<code>make install</code>","text":"<p>Installs and upgrades the project\u2019s dependencies using <code>uv</code>, based on the <code>pyproject.toml</code> file. This includes both development and documentation tools, organized by dependency groups.</p>"},{"location":"content/content.html#make-clean","title":"<code>make clean</code>","text":"<p>Cleans the workspace by removing generated cache and temporary files, including:</p> <ul> <li>Python bytecode (<code>.pyc</code>, <code>.pyo</code>)</li> <li>Cache directories: <code>__pycache__</code>, <code>.pytest_cache</code>, <code>.mypy_cache</code></li> </ul> <p>This ensures a clean state for test and lint runs.</p>"},{"location":"content/content.html#make-lint","title":"<code>make lint</code>","text":"<p>Formats and analyzes code using Ruff:</p> <ul> <li>Automatically applies code formatting.</li> <li>Performs static lint checks on both source and test directories to ensure adherence to   defined coding standards.</li> </ul>"},{"location":"content/content.html#make-code_check","title":"<code>make code_check</code>","text":"<p>Performs in-depth code analysis and security checks:</p> <ul> <li>Mypy: Validates static type annotations.</li> <li>Complexipy: Analyzes code complexity to identify overly complicated logic   structures.</li> <li>Bandit: Detects common security issues in Python code.</li> </ul> <p>This step is essential for maintaining robust, secure, and maintainable codebases.</p>"},{"location":"content/content.html#make-tests","title":"<code>make tests</code>","text":"<p>Executes the project's unit tests using Pytest. If no tests or test files are detected, the command exits gracefully without failure.</p>"},{"location":"content/content.html#make-doc","title":"<code>make doc</code>","text":"<p>Serves the documentation locally using MkDocs. This allows for live previews of your documentation before deployment.</p>"},{"location":"content/content.html#make-pipeline","title":"<code>make pipeline</code>","text":"<p>Runs a full quality pipeline comprising:</p> <ul> <li>Environment cleanup</li> <li>Code linting and formatting</li> <li>Static analysis and security scans</li> <li>Test execution</li> </ul> <p>This target is suitable for continuous integration environments and pre-release validations.</p>"},{"location":"content/content.html#make-all","title":"<code>make all</code>","text":"<p>Performs a complete workflow:</p> <ul> <li>Installs dependencies</li> <li>Executes the full quality pipeline</li> <li>Builds and serves the documentation</li> </ul> <p>Recommended for initial setup and full-cycle verifications.</p>"},{"location":"content/content.html#pyprojecttoml","title":"<code>pyproject.toml</code>","text":"<p>The <code>pyproject.toml</code> file defines the project's metadata, dependency groups, and tool configurations in accordance with modern Python standards.</p>"},{"location":"content/content.html#project","title":"<code>[project]</code>","text":"<p>Specifies metadata such as:</p> <ul> <li>Project name, version, and description</li> <li>Python version compatibility</li> <li>Required runtime dependencies (if any)</li> </ul> <p>This section aligns with PEP 621 standards for project metadata.</p>"},{"location":"content/content.html#dependency-groups","title":"<code>[dependency-groups]</code>","text":"<p>Organizes development dependencies into logical groups:</p> <ul> <li> <p><code>pipeline</code>: Tools used for static analysis, linting, security checks, complexity   analysis, and testing:</p> </li> <li> <p><code>pytest</code>, <code>pytest-order</code>, <code>ruff</code>, <code>mypy</code>, <code>bandit</code>, <code>complexipy</code></p> </li> <li> <p><code>documentation</code>: Tools used to build and extend project documentation with MkDocs   and various plugins:</p> </li> <li> <p><code>mkdocs-material</code>, <code>mkdocstrings</code>, <code>mkdocs-jupyter</code>, etc.</p> </li> </ul> <p>These groups allow selective installation via <code>uv</code>, improving modularity and dependency management.</p>"},{"location":"content/content.html#toolruff","title":"<code>[tool.ruff]</code>","text":"<p>Defines configuration for Ruff, the linter and code formatter:</p> <ul> <li>Line and indentation style</li> <li>Linting rules to enforce (e.g., error detection, unused imports, code simplifications)</li> <li>Excluded directories (e.g., <code>venv</code>, <code>dist</code>, <code>.pytest_cache</code>, <code>.ipynb_checkpoints</code>)</li> <li>Formatting settings for docstrings and imports</li> </ul>"},{"location":"content/content.html#toolmypy","title":"<code>[tool.mypy]</code>","text":"<p>Configures Mypy, the static type checker:</p> <ul> <li>Enables checks on untyped function definitions</li> <li>Ignores unresolved imports (helpful for missing stubs)</li> <li>Excludes irrelevant directories such as build environments</li> </ul> <p>These settings help detect type-related issues early in the development process.</p>"},{"location":"content/content.html#development-workflow","title":"Development Workflow","text":"<p>A typical development and validation workflow using this template may include the following steps:</p> <ol> <li>Setup</li> </ol> <pre><code>make install\n</code></pre> <ol> <li>Clean Environment</li> </ol> <pre><code>make clean\n</code></pre> <ol> <li>Code Linting and Analysis</li> </ol> <pre><code>make lint\nmake code_check\n</code></pre> <ol> <li>Run Tests</li> </ol> <pre><code>make tests\n</code></pre> <ol> <li>Generate and Preview Documentation</li> </ol> <pre><code>make doc\n</code></pre> <ol> <li>Full Workflow Execution</li> </ol> <pre><code>make all\n</code></pre> <p>These commands can be used locally or integrated into CI/CD pipelines for automated validation.</p>"}]}